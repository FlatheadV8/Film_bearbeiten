
ABARBEITUNGSNUMMER="$(echo "${ABARBEITUNGSNUMMER}" | awk '{print $1+1}')"

VERSION="v2015092700"


echo "--------------------------------------------------------------------------
${VERSION} | ${ABARBEITUNGSNUMMER} Eigenschaften lesen
"


#------------------------------------------------------------------------------#
### FFmpeg verwendet drei verschiedene Zeitangaben:
# http://ffmpeg-users.933282.n4.nabble.com/What-does-the-output-of-ffmpeg-mean-tbr-tbn-tbc-etc-td941538.html
# http://stackoverflow.com/questions/3199489/meaning-of-ffmpeg-output-tbc-tbn-tbr
# tbn = the time base in AVStream that has come from the container
# tbc = the time base in AVCodecContext for the codec used for a particular stream
# tbr = tbr is guessed from the video stream and is the value users want to see when they look for the video frame rate
#------------------------------------------------------------------------------#

#------------------------------------------------------------------------------#
### Filmname ermitteln
###
### Datei- und Verzeichnisnamen ermitteln
###
### Erst nach diesem Abschnitt ist der Dateiname bekannt
### und erst dann koennen Log-Daten geschrieben werden.

if [ -z "${SOLLNAME}" ] ; then
        NEUESFILMVERZ="$(dirname "${ORIGINAL}")"
        NEUERFILMNAME="$(basename "${ORIGINAL}" | rev | sed -e 's/ /_/g' -e 's/\./ /' -e 's/\./_/g' | rev | awk '{print $1}')"
else
        NEUESFILMVERZ="$(dirname "${SOLLNAME}")"
        NEUERFILMNAME="$(basename "${SOLLNAME}")"
fi

TITELNAME="${NEUERFILMNAME}"
AUSGABEDATEI="${NEUESFILMVERZ}/${NEUERFILMNAME}"

if [ -e "${AUSGABEDATEI}.${CONTAINER}" ] ; then
        echo "# - 41: Eigenschaften lesen
        ${AUSGABEDATEI}.${CONTAINER} existiert schon!
        ABBRUCH
        " | tee -a ${AUSGABEDATEI}.log
        exit 1
fi

date +'%F %T' | tee ${AUSGABEDATEI}.log

#==============================================================================#
FILMDATEN="$(mediainfo "${ORIGINAL}")"

echo "# - 53: Eigenschaften lesen
#==============================================================================#
${AUFRUF}
#==============================================================================#
" | tee ${AUSGABEDATEI}.log

echo "# - 59: Eigenschaften lesen
aus der Filmdatei ausgelesene Werte:
${FILMDATEN}
" | tee -a ${AUSGABEDATEI}.log

#==============================================================================#
### IST-Variablen
#------------------------------------------------------------------------------#
### Video-ID

ISTVIDEOID="$(echo "${FILMDATEN}" | sed -n '/^Video/,/^$/p' | egrep '^ID[ ]+' | sed 's/^ID[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[(].*$//g' | head -n1)"

echo "# - 71: Eigenschaften lesen
ISTVIDEOID='${ISTVIDEOID}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Bildwiederholrate

ISTVIDEOBilPS="$(echo "${FILMDATEN}" | awk -F':' '/Frame rate[ ]+/{print $2}' | tr -s ' ' '\n' | egrep -v '^$' | egrep '[0-9]' | head -n1)"

echo "# - 80: Eigenschaften lesen
ISTVIDEOBilPS='${ISTVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Scan Type
# multimedia/mediainfo soll den Scan Type relativ gut erkennen kÃ¶nnen,
# es soll jedoch bei 50p oft 50i ausgeben

SCAN_TYPE="$(echo "${FILMDATEN}" | awk -F':' '/Scan type[ ]+/{print $2}' | tr -s ' ' '\n' | egrep -v '^$' | head -n1)"

if [ -z "${SCAN_TYPE}" ] ; then
	# diese Methode ist recht unzuverlaessig aber im Notfall besser als garnichts
	SCAN_TYPE="$(ffprobe -i "${ORIGINAL}" 2>&1 | egrep 'Stream #.*: Video:' | tr -s ',' '\n' | egrep ' tbr| tbc' | awk '{print $2"="$1}' | sort | sed 's/[a-z]*[=]//g' | tr -s '\n' ' ' | awk '{teil = $1 / $2 ; ausgabe="interlaced?" ; if (teil == 1) ausgabe="Progressive"; print ausgabe }')"
fi

if [ -z "${SCAN_TYPE}" ] ; then
	# wenn nicht automatisch ermittelt werden kann ob die Bilder im Zeilensprungverfahren aufgebaut werden,
	# dann werden wir am besten hier abbrechen
	echo "# - 99: Eigenschaften lesen
        Es konnte nicht ermittelt werden, ob die Bilder im Zeilensprungverfahren aufgebaut werden.
        " | tee -a ${AUSGABEDATEI}.log
	ENDE="Ja"
else
	if [ "${SCAN_TYPE}" == "Progressive" ] ; then
	        echo "# - 105: Eigenschaften lesen
		Progressive
                " | tee -a ${AUSGABEDATEI}.log
	else
	        echo "# - 109: Eigenschaften lesen
		wahrscheinlich interlaced
                " | tee -a ${AUSGABEDATEI}.log
	fi
fi

echo "# - 115: Eigenschaften lesen
SCAN_TYPE='${SCAN_TYPE}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Original-DAR
ISTVIDEODispl="$(echo "${FILMDATEN}" | sed -n '/^Video$/,/^$/p' | egrep '^Original display aspect ratio[ ]+' | sed 's/^Original display aspect ratio[ ][ ]*[:][ ][ ]*//' | rev | sed 's#[:/]#/#' | rev | head -n1 | awk '{print $NF}')"

if [ -z "${ISTVIDEODispl}" ] ; then
	### DAR
	ISTVIDEODispl="$(echo "${FILMDATEN}" | sed -n '/^Video$/,/^$/p' | egrep '^Display aspect ratio[ ]+' | sed 's/^Original display aspect ratio[ ][ ]*[:][ ][ ]*//' | rev | sed 's#[:/]#/#' | rev | head -n1 | awk '{print $NF}')"
fi

echo "# - 128: Eigenschaften lesen
ISTVIDEODispl='${ISTVIDEODispl}'
" | tee -a ${AUSGABEDATEI}.log

if [ -z "${ISTVIDEODispl}" ] ; then
	echo "# - 133: Eigenschaften lesen
        Es konnte nicht ermittelt werden, welches Bildformat der Film hat.
        " | tee -a ${AUSGABEDATEI}.log
	ENDE="Ja"
fi

echo "# - 139: Eigenschaften lesen
ISTVIDEODisBr='${ISTVIDEODisBr}'
ISTVIDEODispl='${ISTVIDEODispl}'
" | tee -a ${AUSGABEDATEI}.log

if [ -z "${ISTVIDEODisBr}" ] ; then
	ISTVIDEODisBr="$(FLIESSKOMMA_ZU_BRUCH ${ISTVIDEODispl})"
fi
if [ -z "${ISTVIDEODispl}" ] ; then
	ISTVIDEODispl="$(BRUCH_IN_FLIESSKOMMAZAHL ${ISTVIDEODisBr})"
fi

echo "# - 151: Eigenschaften lesen
ISTVIDEODisBr='${ISTVIDEODisBr}'
ISTVIDEODispl='${ISTVIDEODispl}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Bildaufloesung
ISTVIDEOBREIT="$(echo "${FILMDATEN}" | egrep '^Width[ ]+' | sed 's/^Width[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[a-zA-Z]*//g' | head -n1)"
ISTVIDEO_HOCH="$(echo "${FILMDATEN}" | egrep '^Height[ ]+' | sed 's/^Height[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[a-zA-Z]*//g' | head -n1)"

echo "# - 161: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'
" | tee -a ${AUSGABEDATEI}.log

#==============================================================================#
### Infos der Audiospuren nummerieren

ISTAUDIOID="$(echo "${FILMDATEN}" | sed -n '/^Audio/,/^$/p' | egrep '^ID[ ]+' | sed 's/^ID[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[(].*$//g' | head -n1)"
ISTAUDIOMENUID="$(echo "${FILMDATEN}" | sed -n '/^Audio/,/^$/p' | egrep '^Menu ID[ ]+' | sed 's/^Menu ID[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[(].*$//g' | head -n1)"
ISTAUDIOCODECID="$(echo "${FILMDATEN}" | sed -n '/^Audio/,/^$/p' | egrep '^Codec ID[ ]+' | sed 's/^Codec ID[ ][ ]*[:][ ][ ]*//;s/[ ]*//g;s/[(].*$//g' | head -n1)"

echo "# - 173: Eigenschaften lesen
ISTAUDIOID='${ISTAUDIOID}'
ISTAUDIOMENUID='${ISTAUDIOMENUID}'
ISTAUDIOCODECID='${ISTAUDIOCODECID}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### wenn die Bildhoehe uebergeben wurde,
### dann wird sie hier gesetzt

if [ "${ISTVIDEO_HOCH}" == "1088" ] ; then
        SCAN_TYPE="interlaced"
fi

echo "# - 187: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'
" | tee -a ${AUSGABEDATEI}.log

if [ -n "${ISTVIDEO_HOCH}" ] ; then
        ISTVIDEO_HOCH="$(echo "${ISTVIDEO_HOCH}"|awk '{print $1*1}')"
else
        if [ "${ISTVIDEO_HOCH}" == "1088" ] ; then
                echo "# - 196: Eigenschaften lesen
################################################################################
# Es wurde aus dem Video die Bildhoehe von 1088 Pixeln gelesen,
# moeglicherweise ist das ein 1080i-Video im MPEG2-Kontainer (.mts/.m2ts).
# Der MPEG2-Kontainer verlangt eine durch 16 teilbare Zeilenanzahl (mod16).
# Die 8 zusaetzlichen Zeilen sind im allgemeinen grau und werden meistens
# nicht mit angezeigt.
# Das Seitenverhaeltnis ist dann nicht 16/9 sondern 30/17.
#
# In dem Fall sollte der deinterlacer aktiviert werden um progressive Bilder
# zu erzeugen:
# -progress
#
# In wirklichkeit hat das Viedeo dann aber 1080 Zeilen, das muss dem Skript
# gesagt werden:
# -ihoch 1080 -idar 16/9
################################################################################
" | tee -a ${AUSGABEDATEI}.log
        fi
fi

echo "# - 217: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'

SOLLVIDEOBilPS='${SOLLVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### wenn die Bildwiederholrate uebergeben wurde,
### dann wird sie hier gesetzt

if [ -n "${SOLLVIDEOBilPS}" ] ; then
        SOLLVIDEOBilPS="$(echo "${SOLLVIDEOBilPS} 1"|awk '{print $1,$2}'|sed 's/[:/]/ /'|awk '{print $1/$2}')"
else
        SOLLVIDEOBilPS="${ISTVIDEOBilPS}"
        #----------------------------------------------------------------------#
        ### wenn in den Metadaten des Filmes 1000 fps steht,
        ### dann sind es in wirklichkeit 15 fps
        if [ "${ISTVIDEOBilPS}" == "1000" ] ; then
                echo "# - 236: Eigenschaften lesen
################################################################################
# Es wurde aus dem Video die Bildwiederholrate von 1000 Bildern pro Sekunde
# gelesen, moeglicherweise ist das ein Fehler.
# Sehr viele Videos weisen eine Bildwiederholrate von 1000 Bildern pro Sekunde
# aus, laufen aber tatsaechlich mit 15 Bildern pro Sekunde.
#
# Wenn das Video mit einer Bildwiederholrate von 15 Bildern pro Sekunde laeuft,
# dann koennen Sie das Problem mit dieser Option loesen:
# -ifps 15
################################################################################
" | tee -a ${AUSGABEDATEI}.log
        fi
fi

echo "# - 251: Eigenschaften lesen
SOLLVIDEOBilPS='${SOLLVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Umwandlung der Kurzformen (pal, ntsc, dvd, dvb) in Bruch und Fliesskommazahl

if [ -n "${INVIDEOPixel}" ] ; then
        VIDEOPixelUMWANDLUNG ${INVIDEOPixel}
	if [ -z "${INVIDEOPixBr}" ] ; then
        	INVIDEOPixBr="${VIDEOPixelBruch}"
	fi
        INVIDEOPixel="${VIDEOPixelFlies}"
fi

#------------------------------------------------------------------------------#
### gelsene Werte werden mit Eingabewerten ueberschrieben

echo "# - 269: Eigenschaften lesen
INVIDEOBREIT='${INVIDEOBREIT}'
INVIDEO_HOCH='${INVIDEO_HOCH}'
INVIDEOPixBr='${INVIDEOPixBr}'
INVIDEOPixel='${INVIDEOPixel}'
INVIDEODisBr='${INVIDEODisBr}'
INVIDEODispl='${INVIDEODispl}'
INVIDEOBilPS='${INVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

if [ -n "${INVIDEOBREIT}" ] ; then
        ISTVIDEOBREIT="${INVIDEOBREIT}"
fi

if [ -n "${INVIDEO_HOCH}" ] ; then
        ISTVIDEO_HOCH="${INVIDEO_HOCH}"
fi

if [ -n "${INVIDEOPixel}" ] ; then
        PxBruch="$(echo "${INVIDEOPixel}" | awk -F'[:/]' '/[:/]/{print $1"/"$2}')"

	echo "# - 290: Eigenschaften lesen
	INVIDEOPixel='${INVIDEOPixel}'
	DxBruch='${DxBruch}'
	" | tee -a ${AUSGABEDATEI}.log

        if [ -n "${PxBruch}" ] ; then
                ISTVIDEOPixBr="${PxBruch}"
                ISTVIDEOPixel="$(BRUCH_IN_FLIESSKOMMAZAHL ${INVIDEOPixBr})"
        else
                ISTVIDEOPixBr="$(FLIESSKOMMA_ZU_BRUCH ${INVIDEOPixel})"
                ISTVIDEOPixel="${INVIDEOPixel}"
        fi
fi

if [ -n "${INVIDEODispl}" ] ; then
        DiBruch="$(echo "${INVIDEODispl}" | awk -F'[:/]' '/[:/]/{print $1"/"$2}')"

	echo "# - 307: Eigenschaften lesen
	INVIDEODispl='${INVIDEODispl}'
	DiBruch='${DiBruch}'
	" | tee -a ${AUSGABEDATEI}.log

        if [ -n "${DiBruch}" ] ; then
                ISTVIDEODisBr="${DiBruch}"
                ISTVIDEODispl="$(BRUCH_IN_FLIESSKOMMAZAHL ${INVIDEODisBr})"
        else
                ISTVIDEODisBr="$(FLIESSKOMMA_ZU_BRUCH ${INVIDEODispl})"
                ISTVIDEODispl="${INVIDEODispl}"
        fi
fi

if [ -n "${INVIDEOBilPS}" ] ; then
        ISTVIDEOBilPS="${INVIDEOBilPS}"
fi

echo "# - 325: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'
ISTVIDEOPixBr='${ISTVIDEOPixBr}'
ISTVIDEOPixel='${ISTVIDEOPixel}'
ISTVIDEODisBr='${ISTVIDEODisBr}'
ISTVIDEODispl='${ISTVIDEODispl}'
ISTVIDEOBilPS='${ISTVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

#==============================================================================#
###
### Einer von vier der fuenf benuetigten Werte kann errechnet
### werden, wenn er nicht ausgelesen werden konnte
### und nicht mit uebergeben wurde.
### Die Bildwiederholrate kann nicht automatisch interpoliert werden,
### sollte sie oder zwei der anderen vier Werte fehlen, dann muss abgebrochen
### werden.
###
#------------------------------------------------------------------------------#
### Hier wird versucht dort zu interpolieren, wo es erforderlich ist.
### Es kann jedoch von den vier Werten nur einer mit Hilfe der drei vorhandenen
### interpoliert werden.

if [ -z "${ISTVIDEOBREIT}" ] ; then
        # jetzt brauchen wir ${ISTVIDEO_HOCH} und (${ISTVIDEOPixel} und ${ISTVIDEODispl})
        echo "# - 351: Eigenschaften lesen
        Bildbreite interpolieren..." | tee -a ${AUSGABEDATEI}.log
        # echo "576 1,3333333 1,0666667" | awk '{print f("%.0f\n",$1*$2/$3)}' = 720
        ISTVIDEOBREIT="$(echo "${ISTVIDEO_HOCH} ${ISTVIDEODispl} ${ISTVIDEOPixel}" | awk '{printf("%.0f\n",$1*$2/$3)}')"
fi

if [ -z "${ISTVIDEO_HOCH}" ] ; then
        # jetzt brauchen wir ${ISTVIDEOBREIT} und (${ISTVIDEOPixel} und ${ISTVIDEODispl})
        echo "# - 359: Eigenschaften lesen
        Bildhoehe interpolieren...
        " | tee -a ${AUSGABEDATEI}.log
        # echo "720 1,06667 1,3333333" | awk '{printf("%.0f\n",$1*$2/$3)}' = 576
        ISTVIDEO_HOCH="$(echo "${ISTVIDEOBREIT} ${ISTVIDEOPixel} ${ISTVIDEODispl}" | awk '{printf("%.0f\n",$1*$2/$3)}')"
fi

# evtl. lohnt es sich, hier die Genauigkeit zu erhÃ¶hen
if [ -z "${ISTVIDEOPixel}" ] ; then
        # jetzt brauchen wir ${ISTVIDEOBREIT} und  ${ISTVIDEO_HOCH} und ${ISTVIDEODispl}
        echo "# - 369: Eigenschaften lesen
        ISTVIDEOPixel (PAR) interpolieren...
        " | tee -a ${AUSGABEDATEI}.log
        # echo "720 576 4 3"  |  awk '{print ($2*$3)/($1*$4)}'      = 1,0666667
        # echo "720 576 1,3333333" | awk '{print $3/($1/$2)}'       = 1,0666667
        ISTVIDEOPixel="$(echo "${ISTVIDEOBREIT} ${ISTVIDEO_HOCH} ${ISTVIDEODispl}" | awk '{printf("%.16f\n",$3/($1/$2))}')"
        echo "# - 375: Eigenschaften lesen
        ${ISTVIDEOBREIT}|${ISTVIDEO_HOCH}|${ISTVIDEODispl}
        ISTVIDEOPixel='${ISTVIDEOPixel}'
        " | tee -a ${AUSGABEDATEI}.log
fi

if [ -z "${ISTVIDEOPixBr}" ] ; then
	if [ -n "${ISTVIDEOPixel}" ] ; then
                echo "# - 383: Eigenschaften lesen
                ISTVIDEOPixel in ISTVIDEOPixBr umrechnen...
                " | tee -a ${AUSGABEDATEI}.log
		ISTVIDEOPixBr="$(FLIESSKOMMA_ZU_BRUCH ${ISTVIDEOPixel})"
                echo "
                ISTVIDEOPixel='${ISTVIDEOPixel}'
                ISTVIDEOPixBr='${ISTVIDEOPixBr}'
                " | tee -a ${AUSGABEDATEI}.log
	fi
fi

# evtl. lohnt es sich, hier die Genauigkeit zu erhÃ¶hen
if [ -z "${ISTVIDEODispl}" ] ; then
        # jetzt brauchen wir ${ISTVIDEOBREIT} und  ${ISTVIDEO_HOCH} und ${ISTVIDEOPixel}
        # echo "576 720 64 60"      | awk '{print ($2*$3)/($1*$4)}' = 1,3333333
        # echo "576 720 1,0666667" | awk '{print $3/($1/$2)}'       = 1,3333333
        echo "# - 399: Eigenschaften lesen
        ISTVIDEODispl (DAR) aus ISTVIDEOBREIT und ISTVIDEOPixel berechnen...
        " | tee -a ${AUSGABEDATEI}.log
        ISTVIDEODispl="$(echo "${ISTVIDEO_HOCH} ${ISTVIDEOBREIT} ${ISTVIDEOPixel}" | awk '{printf("%.16f\n",$3/($1/$2))}')"
        echo "# - 403: Eigenschaften lesen
        ISTVIDEODispl='${ISTVIDEODispl}'
        " | tee -a ${AUSGABEDATEI}.log
fi


if [ -z "${ISTVIDEODisBr}" ] ; then
        if [ -n "${ISTVIDEOPixel}" ] ; then
                echo "# - 411: Eigenschaften lesen
                ISTVIDEODisBr aus ISTVIDEOBREIT, ISTVIDEO_HOCH und ISTVIDEOPixel berechnen...
                " | tee -a ${AUSGABEDATEI}.log
                ISTVIDEODisBr="$(BILD_ASPECT ${ISTVIDEOBREIT} ${ISTVIDEO_HOCH} ${ISTVIDEOPixel})"
                echo "
                ISTVIDEODisBr='${ISTVIDEODisBr}'
                " | tee -a ${AUSGABEDATEI}.log
        elif [ -n "${ISTVIDEODispl}" ] ; then
                echo "# - 419: Eigenschaften lesen
                ISTVIDEODisBr aus ISTVIDEODispl berechnen...
                " | tee -a ${AUSGABEDATEI}.log
                ISTVIDEODisBr="$(FLIESSKOMMA_ZU_BRUCH ${ISTVIDEODispl})"
                echo "
                ISTVIDEODisBr='${ISTVIDEODisBr}'
                " | tee -a ${AUSGABEDATEI}.log
        else
                echo "# - 427: Eigenschaften lesen
                ISTVIDEODisBr aus ISTVIDEOBREIT und ISTVIDEO_HOCH berechnen...
                " | tee -a ${AUSGABEDATEI}.log
                ISTVIDEODisBr="$(BILD_ASPECT ${ISTVIDEOBREIT} ${ISTVIDEO_HOCH})"
                echo "
                ISTVIDEODisBr='${ISTVIDEODisBr}'
                " | tee -a ${AUSGABEDATEI}.log
        fi
fi

#------------------------------------------------------------------------------#
### Kontrolle, ob das aufarbeiten geklappt hat

echo "# - 440: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'
ISTVIDEOPixBr='${ISTVIDEOPixBr}'
ISTVIDEOPixel='${ISTVIDEOPixel}'
ISTVIDEOBilPS='${ISTVIDEOBilPS}'

ISTVIDEODisBr='${ISTVIDEODisBr}'
ISTVIDEODispl='${ISTVIDEODispl}'

SOLLVIDEOBilPS='${SOLLVIDEOBilPS}'
" | tee -a ${AUSGABEDATEI}.log

if [ -z "${ISTVIDEOBREIT}" ] ; then
	echo "# - 454: Eigenschaften lesen
	Es konnte nicht ermittelt werden, wie breit das Bild des Filmes ist.
	Sie koennen den Fehler beheben, in dem Sie die Bildbreite
	mit dem folgenden Parameter angeben:
	-ibreit 720
	" | tee -a ${AUSGABEDATEI}.log
	ENDE="Ja"
fi

if [ -z "${ISTVIDEO_HOCH}" ] ; then
	echo "# - 464: Eigenschaften lesen
	Es konnte nicht ermittelt werden, wie hoch das Bild des Filmes ist.
	Sie koennen den Fehler beheben, in dem Sie die Bildhoehe
	mit dem folgenden Parameter angeben:
	-ihoch 576
	" | tee -a ${AUSGABEDATEI}.log
	ENDE="Ja"
fi

#==============================================================================#
### SOLL-Variablen

# PAR (Ausgang) -> SOLLVIDEOPixel
# DAR (Ausgang) -> SOLLVIDEODispl
#------------------------------------------------------------------------------#
### Pixel-Verhaeltnis

if [ -n "${SOLLVIDEOPixel}" ] ; then
	VIDEOPixelUMWANDLUNG ${SOLLVIDEOPixel}
	if [ -z "${SOLLVIDEOPixBr}" ] ; then
		SOLLVIDEOPixBr="${VIDEOPixelBruch}"
	fi
	SOLLVIDEOPixel="${VIDEOPixelFlies}"
fi

if [ -z "${SOLLVIDEOPixel}" ] ; then
        SOLLVIDEOPixel="${ISTVIDEOPixel}"
fi

#------------------------------------------------------------------------------#
### wenn es ein Bruch ist, dann muss er verschoben und ausgerechnet werden
case "${SOLLVIDEOPixel}" in
        [0-9]*[:/][0-9]*)
		SOLLVIDEOPixBR="${SOLLVIDEOPixel}"
		SOLLVIDEOPixel="$(BRUCH_IN_FLIESSKOMMAZAHL ${SOLLVIDEOPixel})"
                ;;
esac
#------------------------------------------------------------------------------#

if [ -z "${SOLLVIDEOPixBr}" ] ; then
	SOLLVIDEOPixBr="$(FLIESSKOMMA_ZU_BRUCH ${SOLLVIDEOPixel})"
fi

#------------------------------------------------------------------------------#
### Display-Verhaeltnis

echo "# - 510: Eigenschaften lesen
SOLLVIDEODisBr='${SOLLVIDEODisBr}'
SOLLVIDEODispl='${SOLLVIDEODispl}'
" | tee -a ${AUSGABEDATEI}.log

### wenn es ein Bruch ist, dann muss er verschoben und ausgerechnet werden
case "${SOLLVIDEODispl}" in
        [0-9]*[:/][0-9]*)
		SOLLVIDEODisBr="${SOLLVIDEODispl}"
		SOLLVIDEODispl="$(BRUCH_IN_FLIESSKOMMAZAHL ${SOLLVIDEODispl})"
                ;;
esac

echo "# - 523: Eigenschaften lesen
SOLLVIDEOBREIT='${SOLLVIDEOBREIT}'
SOLLVIDEO_HOCH='${SOLLVIDEO_HOCH}'
SOLLVIDEODisBr='${SOLLVIDEODisBr}'
SOLLVIDEODispl='${SOLLVIDEODispl}'
" | tee -a ${AUSGABEDATEI}.log

#==============================================================================#
### Wenn etwas fehlt, dann wird abgebrochen.
(
# Bildbreite
if [ -z "${ISTVIDEOBREIT}" ] ; then
        echo "# - 535: Eigenschaften lesen
        Die Bildbreite konnte nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# Bildhoehe
if [ -z "${ISTVIDEO_HOCH}" ] ; then
        echo "# - 543: Eigenschaften lesen
        Die Bildhoehe konnte nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# PAR
if [ -z "${ISTVIDEOPixel}" ] ; then
        echo "# - 551: Eigenschaften lesen
        Das Seitenverhaeltnis der Bildpunkte konnte nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# PAR, als Bruch
if [ -z "${ISTVIDEOPixBr}" ] ; then
        echo "# - 559: Eigenschaften lesen
        Das Seitenverhaeltnis der Bildpunkte konnte als Bruch nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# DAR
if [ -z "${ISTVIDEODispl}" ] ; then
        echo "# - 567: Eigenschaften lesen
        Das Seitenverhaeltnis des Bildschirmes konnte nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# DAR, als Bruch
if [ -z "${ISTVIDEODisBr}" ] ; then
        echo "# - 575: Eigenschaften lesen
        Das Seitenverhaeltnis des Bildschirmes konnte als Bruch nicht ermittelt werden.
        " | tee -a ${AUSGABEDATEI}.log
        ENDE="Ja"
fi

# FPS
if [ -z "${ISTVIDEOBilPS}" ] ; then
        echo "# - 583: Eigenschaften lesen
        Die Bildwiederholrate konnte nicht ermittelt werden.
        "
        ENDE="Ja"
fi
) | tee -a ${AUSGABEDATEI}.log
#------------------------------------------------------------------------------#

#==============================================================================#

if [ "${ENDE}" == "Ja" ] ; then
	echo "# - 594: Eigenschaften lesen
	# 5 - Ende
	ENDE='${ENDE}'
        ABBRUCH
	" | tee -a ${AUSGABEDATEI}.log
	exit 1
fi


echo "# - 603: Eigenschaften lesen
ISTVIDEOBREIT='${ISTVIDEOBREIT}'
ISTVIDEO_HOCH='${ISTVIDEO_HOCH}'
ISTVIDEOPixBr='${ISTVIDEOPixBr}'
ISTVIDEOPixel='${ISTVIDEOPixel}'
ISTVIDEOBilPS='${ISTVIDEOBilPS}'

ISTVIDEODisBr='${ISTVIDEODisBr}'
ISTVIDEODispl='${ISTVIDEODispl}'

SOLLVIDEOBREIT='${SOLLVIDEOBREIT}'
SOLLVIDEO_HOCH='${SOLLVIDEO_HOCH}'
#------------------------------------------------------------------------------#
" | tee -a ${AUSGABEDATEI}.log
