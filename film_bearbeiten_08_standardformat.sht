
ABARBEITUNGSNUMMER="$(echo "${ABARBEITUNGSNUMMER}" | awk '{print $1+1}')"

VERSION="v2016031300"


echo "
================================================================================
${VERSION} | ${ABARBEITUNGSNUMMER} standardformat


#
# Hier wird das Bild in ein Standardformat umgerechnet => 4/3 oder 16/9
#
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#
### Testausgabe

#
# x264
#     -padtop size
#     -padbottom size
#     -padleft size
#     -padright size
#     -padcolor hex_color
# 
# ffmpeg  -vf pad=width:height:x:y:color
#     width:height - endgueltige Bildgroesse
#     x:y          - Position des Bildes im endgueltigen Bild, linke obere Ecke
#     color        - black
#
#     VIDEOOPTION="-vf yadif,pad='max(iw\\,ih*(16/9)):ow/(16/9):(ow-iw)/2:(oh-ih)/2',scale='1024:576',setsar='1/1'"
#
# mencoder
#     expand=320:240:::1
#

#==============================================================================#
### Standard-Format => 4/3 oder 16/9

echo "# - 42: standardformat
STANDARDBILDFORMAT='${STANDARDBILDFORMAT}'

CROPVIDEOBREIT='${CROPVIDEOBREIT}'
                Z_VIDEOBREIT='${CROPVIDEOBREIT}'
                Z_VIDEO_HOCH='${CROPVIDEO_HOCH}'
                Z_VIDEOPixel='${CROPVIDEOPixel}'
                Z_VIDEOPixBr='${CROPVIDEOPixBr}'
                Z_VIDEODispl='${CROPVIDEODispl}'
                Z_VIDEODisBr='${CROPVIDEODisBr}'

QUADVIDEOBREIT='${QUADVIDEOBREIT}'
                Z_VIDEOBREIT='${QUADVIDEOBREIT}'
                Z_VIDEO_HOCH='${QUADVIDEO_HOCH}'
                Z_VIDEOPixel='${QUADVIDEOPixel}'
                Z_VIDEOPixBr='${QUADVIDEOPixBr}'
                Z_VIDEODispl='${QUADVIDEODispl}'
                Z_VIDEODisBr='${QUADVIDEODisBr}'

ISTVIDEOBREIT='${ISTVIDEOBREIT}'
                Z_VIDEOBREIT='${ISTVIDEOBREIT}'
                Z_VIDEO_HOCH='${ISTVIDEO_HOCH}'
                Z_VIDEOPixel='${ISTVIDEOPixel}'
                Z_VIDEOPixBr='${ISTVIDEOPixBr}'
                Z_VIDEODispl='${ISTVIDEODispl}'
                Z_VIDEODisBr='${ISTVIDEODisBr}'
" | tee -a ${AUSGABEDATEI}.log

if [ "${STANDARDBILDFORMAT}" = "Ja" ] ; then

        #----------------------------------------------------------------------#
        if [ -n "${CROPVIDEOBREIT}" ] ; then
                Z_VIDEOBREIT="${CROPVIDEOBREIT}"
                Z_VIDEO_HOCH="${CROPVIDEO_HOCH}"
                Z_VIDEOPixel="${CROPVIDEOPixel}"
                Z_VIDEOPixBr="${CROPVIDEOPixBr}"
                Z_VIDEODispl="${CROPVIDEODispl}"
                Z_VIDEODisBr="${CROPVIDEODisBr}"
        elif [ -n "${QUADVIDEOBREIT}" ] ; then
                Z_VIDEOBREIT="${QUADVIDEOBREIT}"
                Z_VIDEO_HOCH="${QUADVIDEO_HOCH}"
                Z_VIDEOPixel="${QUADVIDEOPixel}"
                Z_VIDEOPixBr="${QUADVIDEOPixBr}"
                Z_VIDEODispl="${QUADVIDEODispl}"
                Z_VIDEODisBr="${QUADVIDEODisBr}"
        else
                Z_VIDEOBREIT="${ISTVIDEOBREIT}"
                Z_VIDEO_HOCH="${ISTVIDEO_HOCH}"
                Z_VIDEOPixel="${ISTVIDEOPixel}"
                Z_VIDEOPixBr="${ISTVIDEOPixBr}"
                Z_VIDEODispl="${ISTVIDEODispl}"
                Z_VIDEODisBr="${ISTVIDEODisBr}"
        fi

        #----------------------------------------------------------------------#
        # wenn erforderlich, dann Aufloesung reduzieren

        Z_PIXELANZAHL="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH}" | awk '{print $1 * $2}')"
        PPIXELANZAHL="$(echo "${PBILDBREITE} ${PBILDHOEHE}" | awk '{print $1 * $2}')"

	if [ -z "${SOLLVIDEOBREIT}" ] ; then
		if [ -z "${SOLLVIDEO_HOCH}" ] ; then
			if [ -n "${Z_PIXELANZAHL}" ] ; then
				if [ -n "${PPIXELANZAHL}" ] ; then
					if [ "${Z_PIXELANZAHL}" -gt "${PPIXELANZAHL}" ] ; then
						SOLLVIDEOBREIT="${PBILDBREITE}"
						SOLLVIDEO_HOCH="${PBILDHOEHE}"
						SOLLVIDEOPixel=""
						SOLLVIDEOPixBr=""
						SOLLVIDEODispl=""
						SOLLVIDEODisBr="${PASPECT}"
					fi
				fi
			fi
		fi
	fi

        echo "
        # - 120: standardformat
        Z_PIXELANZAHL='${Z_PIXELANZAHL}'
        PPIXELANZAHL='${PPIXELANZAHL}'

        SOLLVIDEOBREIT='${SOLLVIDEOBREIT}'
        SOLLVIDEO_HOCH='${SOLLVIDEO_HOCH}'
        SOLLVIDEODisBr='${SOLLVIDEODisBr}'
        " | tee -a ${AUSGABEDATEI}.log

        #----------------------------------------------------------------------#
        ### Berechnung - Anfang
        ### wenn es bereits ein Standardformat ist,
        ### dann braucht hier nicht gerechnet werden

        if [ "${Z_VIDEODisBr}" != "4/3" ] ; then

            if [ "${Z_VIDEODisBr}" != "16/9" ] ; then

                #--------------------------------------------------------------#
        	#
        	# STD_FORMAT 1.4
        	# Ausgabe:  4/3
        	#
        	# Wenn Breit/Hoch <  1,49333, dann  4/3
        	#       wenn Breit/Hoch <  4/3, dann oben+unten schwarze Balken ergaenzen   -> auf Basis der Bildbreite berechnen
        	#       wenn Breit/Hoch >  4/3, dann links+rechts schwarze Balken ergaenzen -> auf Basis der Bildhoehe berechnen
        	# Wenn Breit/Hoch >= 1,49333, dann 16/9
        	#       wenn Breit/Hoch < 16/9, dann oben+unten schwarze Balken ergaenzen   -> auf Basis der Bildbreite berechnen
        	#       wenn Breit/Hoch > 16/9, dann links+rechts schwarze Balken ergaenzen -> auf Basis der Bildhoehe berechnen
        	#

        	echo "
        	# - 152: standardformat
        	Z_VIDEODispl='${Z_VIDEODispl}'
        	Z_VIDEODisBr='${Z_VIDEODisBr}'
        	SOLLVIDEODisBr='${SOLLVIDEODisBr}'
        	" | tee -a ${AUSGABEDATEI}.log

        	FORMATPOSITION="$(echo "${Z_VIDEODispl}"|awk '{printf "%u\n", $1 * 100000}')"

        	echo "
		# - 161: standardformat
		FORMATPOSITION='${FORMATPOSITION}'
        	" | tee -a ${AUSGABEDATEI}.log

		if [ "${PPROFIL}" = ipad ] ; then
        		FORMATPOSITION="150000"
        	fi

        	echo "
		# - 170: standardformat
		FORMATPOSITION='${FORMATPOSITION}'
        	" | tee -a ${AUSGABEDATEI}.log

        	if [ "${FORMATPOSITION}" -lt "149333" ] ; then
                	### ffmpeg rechnet falsch, wenn SAR nicht gleich 1 ist
                	#FFMPEGPAD="pad='max(iw\,ih*(4/3)):ow/(4/3):(ow-iw)/2:(oh-ih)/2'"
                	SOLLVIDEODisBr="4/3"
                	Links="4"	# 4/3 = 12/9
                	Oben="3"	# 4/3 = 12/9
                	Verh="1.33333"	# 4/3 = 12/9

                	# iB = in  Breite (IST-Bildbreite)
                	# oB = out Breite (SOLL-Bildbreite)
                	# iH = in  Hoehe  (IST-Bildhoehe)
                	# oH = out Hoehe  (SOLL-Bildhoehe)
                	# iA = in  Aspect (IST-Format)
                	# oA = out Aspect (SOLL-Format)

        		if [ "${FORMATPOSITION}" -gt "133333" ] ; then
                		# B = sqr( ( b * h ) * b / h )
                		# H = B * 3 / 4
                		# oB = iB * oA / iA
                		SCHWARZ="oben"
        			echo "# - 194 standardformat: 3 / 4 ${SCHWARZ}" | tee -a ${AUSGABEDATEI}.log
                		oH="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr}" | awk -F'[x/: ]' '{printf "%.0f\n", ($2 * $4 * $5) / $1 / $6 / 2 }' | awk '{print $1 * 2}')"
                		S_OBEN="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr} ${oH}" | awk -F'[x/: ]' '{printf "%.0f\n", ($7 - $4) / 2}')"
                		FFMPEGPAD="pad='${Z_VIDEOBREIT}:${oH}:0:${S_OBEN}'"
        		else
                		# B = H * 4 / 3
                		# H = sqr( ( b * h ) * h / b )
                		# oH = iH * iA / oA
                		SCHWARZ="links"
        			echo "# - 203 standardformat: 3 / 4 ${SCHWARZ}" | tee -a ${AUSGABEDATEI}.log
                		oB="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr}" | awk -F'[x/: ]' '{printf "%.0f\n", ($1 * $3 * $6) / $2 / $5 / 2 }' | awk '{print $1 * 2}')"
                		S_LINKS="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr} ${oB}" | awk -F'[x/: ]' '{printf "%.0f\n", ($7 - $3) / 2}')"
                		FFMPEGPAD="pad='${oB}:${Z_VIDEO_HOCH}:${S_LINKS}:0'"
        		fi
        	else
                	### ffmpeg rechnet falsch, wenn SAR nicht gleich 1 ist
                	#FFMPEGPAD="pad='max(iw\,ih*(16/9)):ow/(16/9):(ow-iw)/2:(oh-ih)/2'"
                	SOLLVIDEODisBr="16/9"
                	Links="16"	# 16/9
                	Oben="9"	# 16/9
                	Verh="1.77778"	# 16/9

        		if [ "${FORMATPOSITION}" -lt "177778" ] ; then
                		# B = H * 16 / 9
                		# B = H * $4 / $5
                		# H = sqr( ( b * h ) * h / b )
                		# H = sqr( ( $1 * $2 * $2 ) / $1 )
                		# oB = iB * oA / iA
                		SCHWARZ="links"
        			echo "# - 223 standardformat: 16 / 9 ${SCHWARZ}" | tee -a ${AUSGABEDATEI}.log
                		oB="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr}" | awk -F'[x/: ]' '{printf "%.0f\n", ($1 * $3 * $6) / $2 / $5 / 2 }' | awk '{print $1 * 2}')"
                		S_LINKS="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr} ${oB}" | awk -F'[x/: ]' '{printf "%.0f\n", ($7 - $3) / 2}')"
                		FFMPEGPAD="pad='${oB}:${Z_VIDEO_HOCH}:${S_LINKS}:0'"
        		else
                		# B = sqr( ( b * h ) * b / h )
                		# B = sqr( ( $1 * $2 * $1 ) / $2 )
                		# H = B * 9 / 16
                		# H = B * $5 / $4
                		# oH = iH * iA / oA
                		SCHWARZ="oben"
        			echo "# - 234 standardformat: 16 / 9 ${SCHWARZ}" | tee -a ${AUSGABEDATEI}.log
                		oH="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr}" | awk -F'[x/: ]' '{printf "%.0f\n", ($2 * $4 * $5) / $1 / $6 / 2 }' | awk '{print $1 * 2}')"
                		S_OBEN="$(echo "${Links} ${Oben} ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEODisBr} ${oH}" | awk -F'[x/: ]' '{printf "%.0f\n", ($7 - $4) / 2}')"
                		FFMPEGPAD="pad='${Z_VIDEOBREIT}:${oH}:0:${S_OBEN}'"
        		fi
        	fi

        	echo "
		# - 242: standardformat
		FORMATPOSITION='${FORMATPOSITION}'
		SCHWARZ='${SCHWARZ}'
		oB='${oB}'
		oH='${oH}'
		S_OBEN='${S_OBEN}'
		S_LINKS='${S_LINKS}'
		FFMPEGPAD='${FFMPEGPAD}'
		Z_VIDEOBREIT='${Z_VIDEOBREIT}'
		Z_VIDEO_HOCH='${Z_VIDEO_HOCH}'
		Z_VIDEOPixel='${Z_VIDEOPixel}'
		Links='${Links}'
		Oben='${Oben}'
		${Z_VIDEOBREIT}; ${Z_VIDEO_HOCH}; ${Z_VIDEOPixel}; ${Links}; ${Oben};
        	" | tee -a ${AUSGABEDATEI}.log

		#==============================================================#
		BLUE_AUFLOESUNG_LINKS()
		{
		T_HOEHE="$(echo "${1} ${2} ${3} ${5} ${4} ${6} ${6} ${7}}" | awk '{printf "%u %u\n", sqrt($1*$2*9/1.1/16)/2,sqrt($1*$2*9*1.1/16)/2}')"
		for i in $(seq ${T_HOEHE})
		do
        		echo "${1} ${2} ${3} ${5} ${4} ${6} ${6} ${7} ${i}" | awk '{h=$6*2; printf "%u %u %f %u %u %u %.0f\n", $1, $2, $3, $4, $5,  h, (h*$4/$5)/2}' | awk '{print $1, $2, $3, $4, $5,  $6, $7*2}' | awk '{printf "%f %f %ux%u\n",  ($1*$2)-($6*$7), ($4/$5)-($7/$6), $7, $6}'
		done | tr -d '-' | sort -n | head -n1 | awk '{print $NF}'
		}
		#==============================================================#
		BLUE_AUFLOESUNG_OBEN()
		{
		T_HOEHE="$(echo "${1} ${2} ${3} ${4} ${5} ${6} ${6} ${7}" | awk '{printf "%u %u\n", sqrt($1*$2*9/1.1/16)/2,sqrt($1*$2*9*1.1/16)/2}')"
		for i in $(seq ${T_HOEHE})
		do
        		echo "${1} ${2} ${3} ${4} ${5} ${6} ${6} ${7} ${i}" | awk '{h=$6*2; printf "%u %u %f %u %u %u %.0f\n", $1, $2, $3, $4, $5,  h, (h*$4/$5)/2}' | awk '{print $1, $2, $3, $4, $5,  $6, $7*2}' | awk '{printf "%f %f %ux%u\n",  ($1*$2)-($6*$7), ($4/$5)-($7/$6), $7, $6}'
		done | tr -d '-' | sort -n | head -n1 | awk '{print $NF}'
		}
		#==============================================================#

        	if [ "${SCHWARZ}" = links ] ; then
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{ h=sqrt(($1*$2*$3*$5)/$4) ; printf "%u %u\n", (h*$4)/$5/2,h/2}' | awk '{printf "%ux%u\n", $1*2,$2*2}')"
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{ h=sqrt(($1*$2*$5)/$4) ; printf "%u %u\n", (h*$4)/$5/2,h/2}' | awk '{printf "%ux%u\n", $1*2,$2*2}')"
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{vb=$5; vh=$4; p=$1*$2; for(i=1; ab*ah<p; i++) { ab=i*vb; ah=i*vh} printf "%ux%u\n", ab, ah}')"
        		SOLLAUFLOESUNG="$(BLUE_AUFLOESUNG_LINKS ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben})"
        	elif [ "${SCHWARZ}" = oben ] ; then
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{ h=sqrt(($1*$2*$3*$4)/$5) ; printf "%u %u\n", h/2,(h*$5)/$4/2}' | awk '{printf "%ux%u\n", $1*2,$2*2}')"
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{ h=sqrt(($1*$2*$4)/$5) ; printf "%u %u\n", h/2,(h*$5)/$4/2}' | awk '{printf "%ux%u\n", $1*2,$2*2}')"
        		#SOLLAUFLOESUNG="$(echo "${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben}" | awk '{vb=$4; vh=$5; p=$1*$2; for(i=1; ab*ah<p; i++) { ab=i*vb; ah=i*vh} printf "%ux%u\n", ab, ah}')"
        		SOLLAUFLOESUNG="$(BLUE_AUFLOESUNG_OBEN ${Z_VIDEOBREIT} ${Z_VIDEO_HOCH} ${Z_VIDEOPixel} ${Links} ${Oben})"
        	fi


        	STDVIDEOBREIT="$(echo "${SOLLAUFLOESUNG}" | awk -F'x' '{print $1}')"
        	STDVIDEO_HOCH="$(echo "${SOLLAUFLOESUNG}" | awk -F'x' '{print $2}')"
		STDVIDEOPixel="1"
		STDVIDEOPixBr="1/1"
		STDVIDEODispl="${Verh}"
		STDVIDEODisBr="${Links}/${Oben}"

        	echo "
        	# - 299: standardformat
        	SOLLAUFLOESUNG='${SOLLAUFLOESUNG}'

        	FORMATPOSITION='${FORMATPOSITION}'
        	FFMPEGPAD='${FFMPEGPAD}'
        	Z_VIDEODisBr='${Z_VIDEODisBr}'
        	SOLLVIDEODisBr='${SOLLVIDEODisBr}'
        	" | tee -a ${AUSGABEDATEI}.log

                #--------------------------------------------------------------#
                ### Berechnung - Ende

            fi

        fi

        #----------------------------------------------------------------------#

        echo "
        # - 318: standardformat
        SOLLVIDEODisBr='${SOLLVIDEODisBr}'
        " | tee -a ${AUSGABEDATEI}.log

        if [ -z "${SOLLVIDEODispl}" ] ; then
        	SOLLVIDEODispl="$(echo "${SOLLVIDEODisBr}"|awk -F'/' '{print $1 / $2}')"
        fi

        echo "
        # - 327: standardformat
        SOLLVIDEODispl='${SOLLVIDEODispl}'
        PPROFIL='${PPROFIL}'
        " | tee -a ${AUSGABEDATEI}.log

#==============================================================================#

fi


#------------------------------------------------------------------------------#
### VOLLBILDKONVERTIERER / Zeilenentflechtung / Deinterlacing

echo "
# - 341: standardformat
VOLLBILDKONVERTIERER='${VOLLBILDKONVERTIERER}'
PROGRESSIV='${PROGRESSIV}'
SCAN_TYPE='${SCAN_TYPE}'
DEINTERLACING='${DEINTERLACING}'
" | tee -a ${AUSGABEDATEI}.log

if [ "${PROGRESSIV}" = "Ja" -o "${SCAN_TYPE}" != "Progressive" ] ; then
	DEINTERLACING="${VOLLBILDKONVERTIERER}"
fi

echo "
# - 353: standardformat
VOLLBILDKONVERTIERER='${VOLLBILDKONVERTIERER}'
DEINTERLACING='${DEINTERLACING}'
PROGRESSIV='${PROGRESSIV}'
SCAN_TYPE='${SCAN_TYPE}'
DEINTERLACING='${DEINTERLACING}'
" | tee -a ${AUSGABEDATEI}.log

#------------------------------------------------------------------------------#


echo "# - 364 FFMPEGPAD: Standardformat
FFMPEGPAD='${FFMPEGPAD}'
" | tee -a ${AUSGABEDATEI}.log

ESC_FFMPEGPAD="$(echo "${FFMPEGPAD}" | sed 's/[/,:()]/\\&/g;s/[,]/\\&/g')"

echo "# - 370 FFMPEGPAD: Standardformat
ESC_FFMPEGPAD='${ESC_FFMPEGPAD}'

QUADVIDEOBREIT='${QUADVIDEOBREIT}'
QUADVIDEO_HOCH='${QUADVIDEO_HOCH}'
QUADVIDEODispl='${QUADVIDEODispl}'
QUADVIDEODisBr='${QUADVIDEODisBr}'

STDVIDEOBREIT='${STDVIDEOBREIT}'
STDVIDEO_HOCH='${STDVIDEO_HOCH}'
STDVIDEODispl='${STDVIDEODispl}'
STDVIDEODisBr='${STDVIDEODisBr}'

SOLLVIDEOBREIT='${SOLLVIDEOBREIT}'
SOLLVIDEO_HOCH='${SOLLVIDEO_HOCH}'
#------------------------------------------------------------------------------#
" | tee -a ${AUSGABEDATEI}.log
